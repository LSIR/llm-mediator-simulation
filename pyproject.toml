[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "llm-mediator-simulation"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = []
authors = [{ name = "Thibaut de Saivre", email = "thibaut2saivre@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "accelerate",
  "asyncio",
  "bitsandbytes",
  "click",
  "Flask",
  "google-cloud-aiplatform",
  "google-generativeai",
  "httpx",
  "huggingface_hub[cli]",
  "ipykernel",
  "matplotlib",
  "mistralai",
  "openai",
  "perspective",
  "polars",
  "python-dotenv",
  "rich",
  "transformers",
  "streamlit",
  "ollama",
]

[project.urls]
Documentation = "https://github.com/LSIR/llm-mediator-simulation#readme"
Issues = "https://github.com/LSIR/llm-mediator-simulation/issues"
Source = "https://github.com/LSIR/llm-mediator-simulation"

[tool.hatch.version]
path = "src/llm_mediator_simulation/__about__.py"

[tool.hatch.envs.default]
type = "virtual"
path = "venv"
python = "3.12"

[tool.hatch.envs.types]
extra-dependencies = ["pyright>=1.1.0"]
[tool.hatch.envs.types.scripts]
check = "pyright {args:src/llm_mediator_simulation tests}"

[tool.coverage.run]
source_pkgs = ["llm_mediator_simulation", "tests"]
branch = true
parallel = true
omit = ["src/llm_mediator_simulation/__about__.py"]

[tool.coverage.paths]
llm_mediator_simulation = [
  "src/llm_mediator_simulation",
  "*/llm-mediator-simulation/src/llm_mediator_simulation",
]
tests = ["tests", "*/llm-mediator-simulation/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


line-length = 88

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

################################################################################
# EXAMPLE BLACK CONFIG (https://github.com/psf/black/blob/main/pyproject.toml) #
################################################################################

[tool.black]

line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  tests/data
  | profiling
)/
'''
